require_port('py27')
require_tool('nacl-sdk')

names = 'test.c fake_fs.c canonicalize.c naclimc.so run_sel_ldr.py'
for name in names.split(' '):
    work_dir.add(port_dir.get(name))


pydir = get_inst_dir('py27')
pyincdir = pydir.get('include/python2.7')
pylibdir = pydir.get('lib')
work_dir.get('fakefs').symlink_to(pydir)

to_wrap = 'access chdir chmod chown close dup dup2 endpwent execve fchdir fchmod fchown fcntl fstat ftruncate get_current_dir_name getcwd getpwent getpwnam getpwnam_r getpwuid getpwuid_r getwd ioctl lchown link llseek lseek lstat mkdir open pipe pselect read readlink rmdir select setpwent settimeofday stat symlink truncate ttyname ttyname_r umask unlink write opendir readdir closedir'.split(' ')

for x in 'chown lstat pipe rmdir umask mkdir lchown fchown fchmod chmod ttyname access execve select'.split(' '):
    if x in to_wrap: to_wrap.remove(x)

pycflags = [
    '-I'+pyincdir.path,
    '-I'+pylibdir.path,
    '-fno-strict-aliasing',
    '-g',
    '-DNDEBUG',
    '-fwrapv',
    '-L'+pylibdir.path,
    '-lpython2.7',
    '-lm',
    '-lnosys',
    '-std=c99',
    '-Wall',
    '-Werror',
    '-pedantic'    
    ]  + ['-Wl,--wrap=' + name for name in to_wrap]

if run('nacl64-gcc', '-o', 'test', 'test.c', 'fake_fs.c', 'canonicalize.c', *pycflags, cwd=work_dir).success:
    info('running output')
    out = run(work_dir.get('run_sel_ldr.py'), cwd=work_dir)
    info('code was {0}', out.exit_code)

